{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix, useIsRTL } from './ThemeProvider';\nimport { getOverlayDirection } from './helpers';\nimport getInitialPopperStyles from './getInitialPopperStyles';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst defaultProps = {\n  placement: 'right'\n};\nconst Tooltip =\n/*#__PURE__*/\nReact.forwardRef(({\n  bsPrefix,\n  placement,\n  className,\n  style,\n  children,\n  arrowProps,\n  hasDoneInitialMeasure,\n  popper,\n  show,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'tooltip');\n  const isRTL = useIsRTL();\n\n  const _ref = (placement == null ? void 0 : placement.split('-')) || [],\n        _ref2 = _slicedToArray(_ref, 1),\n        primaryPlacement = _ref2[0];\n\n  const bsDirection = getOverlayDirection(primaryPlacement, isRTL);\n  let computedStyle = style;\n\n  if (show && !hasDoneInitialMeasure) {\n    computedStyle = { ...style,\n      ...getInitialPopperStyles(popper == null ? void 0 : popper.strategy)\n    };\n  }\n\n  return (\n    /*#__PURE__*/\n    _jsxs(\"div\", {\n      ref: ref,\n      style: computedStyle,\n      role: \"tooltip\",\n      \"x-placement\": primaryPlacement,\n      className: classNames(className, bsPrefix, \"bs-tooltip-\".concat(bsDirection)),\n      ...props,\n      children: [\n      /*#__PURE__*/\n      _jsx(\"div\", {\n        className: \"tooltip-arrow\",\n        ...arrowProps\n      }),\n      /*#__PURE__*/\n      _jsx(\"div\", {\n        className: \"\".concat(bsPrefix, \"-inner\"),\n        children: children\n      })]\n    })\n  );\n});\nTooltip.defaultProps = defaultProps;\nTooltip.displayName = 'Tooltip';\nexport default Tooltip;","map":null,"metadata":{},"sourceType":"module"}