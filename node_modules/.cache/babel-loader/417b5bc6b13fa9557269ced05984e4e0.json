{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/react-mern-stack/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rudransh/public_html/react-mern-stack/src/core/Checkbox.js\";\nimport React, { useState } from \"react\";\n\nconst Checkbox = ({\n  categories,\n  handleFilters\n}) => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        checked = _useState2[0],\n        setCheked = _useState2[1];\n\n  const handleToggle = c => () => {\n    // return the first index or -1\n    const currentCategoryId = checked.indexOf(c);\n    const newCheckedCategoryId = [...checked]; // if currently checked was not already in checked state > push\n    // else pull/take off\n\n    if (currentCategoryId === -1) {\n      newCheckedCategoryId.push(c);\n    } else {\n      newCheckedCategoryId.splice(currentCategoryId, 1);\n    } // console.log(newCheckedCategoryId);\n\n\n    setCheked(newCheckedCategoryId);\n    handleFilters(newCheckedCategoryId);\n  };\n\n  return categories.map((c, i) => React.createElement(\"li\", {\n    key: i,\n    className: \"list-unstyled\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    onChange: handleToggle(c._id),\n    value: checked.indexOf(c._id === -1),\n    type: \"checkbox\",\n    className: \"form-check-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, c.name)));\n};\n\nexport default Checkbox;","map":{"version":3,"sources":["/home/rudransh/public_html/react-mern-stack/src/core/Checkbox.js"],"names":["React","useState","Checkbox","categories","handleFilters","checked","setCheked","handleToggle","c","currentCategoryId","indexOf","newCheckedCategoryId","push","splice","map","i","_id","name"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAD,KAAmC;AAAA,oBACnBH,QAAQ,CAAC,EAAD,CADW;AAAA;AAAA,QACzCI,OADyC;AAAA,QAChCC,SADgC;;AAGhD,QAAMC,YAAY,GAAGC,CAAC,IAAI,MAAM;AAC5B;AACA,UAAMC,iBAAiB,GAAGJ,OAAO,CAACK,OAAR,CAAgBF,CAAhB,CAA1B;AACA,UAAMG,oBAAoB,GAAG,CAAC,GAAGN,OAAJ,CAA7B,CAH4B,CAI5B;AACA;;AACA,QAAII,iBAAiB,KAAK,CAAC,CAA3B,EAA8B;AAC1BE,MAAAA,oBAAoB,CAACC,IAArB,CAA0BJ,CAA1B;AACH,KAFD,MAEO;AACHG,MAAAA,oBAAoB,CAACE,MAArB,CAA4BJ,iBAA5B,EAA+C,CAA/C;AACH,KAV2B,CAW5B;;;AACAH,IAAAA,SAAS,CAACK,oBAAD,CAAT;AACAP,IAAAA,aAAa,CAACO,oBAAD,CAAb;AACH,GAdD;;AAgBA,SAAOR,UAAU,CAACW,GAAX,CAAe,CAACN,CAAD,EAAIO,CAAJ,KAClB;AAAI,IAAA,GAAG,EAAEA,CAAT;AAAY,IAAA,SAAS,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AACI,IAAA,QAAQ,EAAER,YAAY,CAACC,CAAC,CAACQ,GAAH,CAD1B;AAEI,IAAA,KAAK,EAAEX,OAAO,CAACK,OAAR,CAAgBF,CAAC,CAACQ,GAAF,KAAU,CAAC,CAA3B,CAFX;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,SAAS,EAAC,kBAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOI;AAAO,IAAA,SAAS,EAAC,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCR,CAAC,CAACS,IAAvC,CAPJ,CADG,CAAP;AAWH,CA9BD;;AAgCA,eAAef,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst Checkbox = ({ categories, handleFilters }) => {\n    const [checked, setCheked] = useState([]);\n\n    const handleToggle = c => () => {\n        // return the first index or -1\n        const currentCategoryId = checked.indexOf(c);\n        const newCheckedCategoryId = [...checked];\n        // if currently checked was not already in checked state > push\n        // else pull/take off\n        if (currentCategoryId === -1) {\n            newCheckedCategoryId.push(c);\n        } else {\n            newCheckedCategoryId.splice(currentCategoryId, 1);\n        }\n        // console.log(newCheckedCategoryId);\n        setCheked(newCheckedCategoryId);\n        handleFilters(newCheckedCategoryId);\n    };\n\n    return categories.map((c, i) => (\n        <li key={i} className=\"list-unstyled\">\n            <input\n                onChange={handleToggle(c._id)}\n                value={checked.indexOf(c._id === -1)}\n                type=\"checkbox\"\n                className=\"form-check-input\"\n            />\n            <label className=\"form-check-label\">{c.name}</label>\n        </li>\n    ));\n};\n\nexport default Checkbox;\n"]},"metadata":{},"sourceType":"module"}