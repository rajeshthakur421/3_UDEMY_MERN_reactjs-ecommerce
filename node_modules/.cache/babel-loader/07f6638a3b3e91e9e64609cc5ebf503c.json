{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/src/admin/AddUser.js\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport \"../style.css\";\nimport { createUser } from \"../function/user/API\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\"; // Messages\n\nconst required = \"This field is required\";\nconst maxLength = \"Your input exceed maximum length\";\nconst minLength = \"Your input is minimum length\"; // Error Component\n\nconst errorMessage = error => {\n  return React.createElement(\"div\", {\n    className: \"invalid-feedback\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, error);\n};\n\nconst validateName = value => {\n  let error;\n\n  if (!value) {\n    error = required;\n  } else if (value.length < 4) {\n    error = minLength;\n  } else if (value.length > 20) {\n    error = maxLength;\n  }\n\n  return error;\n};\n\nexport default function Signup() {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        status = _useState2[0],\n        setStatus = _useState2[1];\n\n  return React.createElement(Formik, {\n    initialValues: {\n      Name: \"\"\n    },\n    onSubmit: data => {\n      //console.log(data);\n      createUser(data).then(res => {\n        console.log(res);\n        toast.success(res.data.errors[0].msg);\n      }).catch(err => {\n        console.log(err);\n        toast.success(err);\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, ({\n    errors,\n    touched,\n    isValidating\n  }) => React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, status.type == \"success\" ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"success create\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"success false\"), React.createElement(\"div\", {\n    className: \"col-sm-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"User Signup\")), React.createElement(ToastContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"col-sm-12\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(Field, {\n    className: \"form-control\",\n    type: \"text\",\n    placeholder: \"Name\",\n    name: \"Name\",\n    validate: validateName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), errors.Name && touched.Name && errorMessage(errors.Name)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Field, {\n    type: \"email\",\n    name: \"Email\",\n    className: \"form-control\",\n    placeholder: \"Email\",\n    validate: validateEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), errors.Email && touched.Email && errorMessage(errors.Email)), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Submit\"))))));\n}","map":{"version":3,"sources":["/home/rudransh/public_html/MERN/react-node-ecommerce-front/src/admin/AddUser.js"],"names":["React","useState","ReactDOM","Formik","Form","Field","createUser","axios","ToastContainer","toast","required","maxLength","minLength","errorMessage","error","validateName","value","length","Signup","status","setStatus","Name","data","then","res","console","log","success","errors","msg","catch","err","touched","isValidating","type","validateEmail","Email"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Formik, Form, Field } from \"formik\";\nimport \"../style.css\";\nimport { createUser } from \"../function/user/API\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min\";\n\n// Messages\nconst required = \"This field is required\";\nconst maxLength = \"Your input exceed maximum length\";\nconst minLength = \"Your input is minimum length\";\n\n// Error Component\nconst errorMessage = (error) => {\n  return <div className=\"invalid-feedback\">{error}</div>;\n};\n\nconst validateName = (value) => {\n  let error;\n  if (!value) {\n    error = required;\n  } else if (value.length < 4) {\n    error = minLength;\n  } else if (value.length > 20) {\n    error = maxLength;\n  }\n  return error;\n};\n\n\n\nexport default function Signup() {\n  const [status, setStatus] = useState(\"\");\n\n  return (\n    <Formik\n      initialValues={{\n        Name: \"\",\n      }}\n      onSubmit={(data) => {\n        //console.log(data);\n        createUser(data)\n          .then((res) => {\n            console.log(res);\n            toast.success(res.data.errors[0].msg);\n          })\n          .catch((err) => {\n            console.log(err);\n            toast.success(err);\n          });\n      }}\n    >\n      {({ errors, touched, isValidating }) => (\n        <div className=\"container\">\n          {status.type == \"success\" ? (\n            <div>success create</div>\n          ) : (\n            <div>success false</div>\n          )}\n\n          <div className=\"col-sm-12\">\n            <h3>User Signup</h3>\n          </div>\n          <ToastContainer />\n\n          <div className=\"col-sm-12\">\n            <Form>\n              <div className=\"form-group\">\n                <Field\n                  className=\"form-control\"\n                  type=\"text\"\n                  placeholder=\"Name\"\n                  name=\"Name\"\n                  validate={validateName}\n                />\n                {errors.Name && touched.Name && errorMessage(errors.Name)}\n              </div>\n              <div className=\"form-group\">\n                <Field\n                  type=\"email\"\n                  name=\"Email\"\n                  className=\"form-control\"\n                  placeholder=\"Email\"\n                  validate={validateEmail}\n                />\n                {errors.Email && touched.Email && errorMessage(errors.Email)}\n              </div>\n              \n\n              \n              <div className=\"form-group\">\n                <button className=\"btn btn-primary\" type=\"submit\">\n                  Submit\n                </button>\n              </div>\n            </Form>\n          </div>\n        </div>\n      )}\n    </Formik>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}