{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/src/admin/AddUser.js\";\n// KindaCode.com\n// App.js\nimport React, { useState } from 'react';\n\nfunction App() {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isValid = _useState2[0],\n        setIsValid = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        message = _useState4[0],\n        setMessage = _useState4[1]; // The regular exprssion to validate the email pattern\n  // It may not be 100% perfect but can catch most email pattern errors and assures that the form is mostly right\n\n\n  const emailRegex = /\\S+@\\S+\\.\\S+/;\n\n  const validateEmail = event => {\n    const email = event.target.value;\n\n    if (emailRegex.test(email)) {\n      setIsValid(true);\n      setMessage('Your email looks good!');\n    } else if (email.le) {} else {\n      setIsValid(false);\n      setMessage('Please enter a valid email!');\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"Enter your email\",\n    className: \"email-input\",\n    onChange: validateEmail,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"message \".concat(isValid ? 'success' : 'error'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, message));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/rudransh/public_html/MERN/react-node-ecommerce-front/src/admin/AddUser.js"],"names":["React","useState","App","isValid","setIsValid","message","setMessage","emailRegex","validateEmail","event","email","target","value","test","le"],"mappings":";;AAAA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,GAAT,GAAe;AAAA,oBACiBD,QAAQ,CAAC,KAAD,CADzB;AAAA;AAAA,QACNE,OADM;AAAA,QACGC,UADH;;AAAA,qBAEiBH,QAAQ,CAAC,EAAD,CAFzB;AAAA;AAAA,QAENI,OAFM;AAAA,QAEGC,UAFH,kBAIb;AACA;;;AACA,QAAMC,UAAU,GAAG,cAAnB;;AAEA,QAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA3B;;AACA,QAAIL,UAAU,CAACM,IAAX,CAAgBH,KAAhB,CAAJ,EAA4B;AAC1BN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,MAAAA,UAAU,CAAC,wBAAD,CAAV;AACD,KAHD,MAGM,IAAGI,KAAK,CAACI,EAAT,EAAY,CAEjB,CAFK,MAEA;AACJV,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,UAAU,CAAC,6BAAD,CAAV;AACD;AACF,GAXD;;AAaA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,WAAW,EAAC,kBAFd;AAGE,IAAA,SAAS,EAAC,aAHZ;AAIE,IAAA,QAAQ,EAAEE,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EASE;AAAK,IAAA,SAAS,oBAAaL,OAAO,GAAG,SAAH,GAAe,OAAnC,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,OADH,CATF,CADF;AAeD;;AAED,eAAeH,GAAf","sourcesContent":["// KindaCode.com\n// App.js\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [isValid, setIsValid] = useState(false);\n  const [message, setMessage] = useState('');\n\n  // The regular exprssion to validate the email pattern\n  // It may not be 100% perfect but can catch most email pattern errors and assures that the form is mostly right\n  const emailRegex = /\\S+@\\S+\\.\\S+/;\n\n  const validateEmail = (event) => {\n    const email = event.target.value;\n    if (emailRegex.test(email)) {\n      setIsValid(true);\n      setMessage('Your email looks good!');\n    }else if(email.le){\n\n    }else {\n      setIsValid(false);\n      setMessage('Please enter a valid email!');\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"email\"\n        placeholder=\"Enter your email\"\n        className=\"email-input\"\n        onChange={validateEmail}\n      />\n\n      {/*If the entered email is valid, the message will be blue, otherwise it will be red. */}\n      <div className={`message ${isValid ? 'success' : 'error'}`}>\n        {message}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}