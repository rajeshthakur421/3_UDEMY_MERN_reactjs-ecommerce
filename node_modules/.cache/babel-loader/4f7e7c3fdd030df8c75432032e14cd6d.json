{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useReducer } from 'react';\nconst initialInputState = {\n  value: '',\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return {\n      value: action.value,\n      isTouched: state.isTouched\n    };\n  }\n\n  if (action.type === 'BLUR') {\n    return {\n      isTouched: true,\n      value: state.value\n    };\n  }\n\n  if (action.type === 'RESET') {\n    return {\n      isTouched: false,\n      value: ''\n    };\n  }\n\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  const _useReducer = useReducer(inputStateReducer, initialInputState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        inputState = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n\n  const reset = () => {\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\nexport default useInput;","map":{"version":3,"sources":["/home/rudransh/public_html/MERN/react-node-ecommerce-front/src/admin/useInput.js"],"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","type","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","target","inputBlurHandler","reset","isValid"],"mappings":";AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;AACxBC,EAAAA,KAAK,EAAE,EADiB;AAExBC,EAAAA,SAAS,EAAE;AAFa,CAA1B;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3C,MAAIA,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEL,MAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAhB;AAAuBC,MAAAA,SAAS,EAAEE,KAAK,CAACF;AAAxC,KAAP;AACD;;AACD,MAAIG,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AAC1B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,IAAb;AAAmBD,MAAAA,KAAK,EAAEG,KAAK,CAACH;AAAhC,KAAP;AACD;;AACD,MAAII,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAO;AAAEJ,MAAAA,SAAS,EAAE,KAAb;AAAoBD,MAAAA,KAAK,EAAE;AAA3B,KAAP;AACD;;AACD,SAAOE,iBAAP;AACD,CAXD;;AAaA,MAAMI,QAAQ,GAAIC,aAAD,IAAmB;AAAA,sBACHT,UAAU,CACvCI,iBADuC,EAEvCH,iBAFuC,CADP;AAAA;AAAA,QAC3BS,UAD2B;AAAA,QACfC,QADe;;AAMlC,QAAMC,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACR,KAAZ,CAAlC;AACA,QAAMW,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACP,SAA7C;;AAEA,QAAMW,kBAAkB,GAAIC,KAAD,IAAW;AACpCJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE,OAAR;AAAiBL,MAAAA,KAAK,EAAEa,KAAK,CAACC,MAAN,CAAad;AAArC,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMe,gBAAgB,GAAIF,KAAD,IAAW;AAClCJ,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,QAAMW,KAAK,GAAG,MAAM;AAClBP,IAAAA,QAAQ,CAAC;AAAEJ,MAAAA,IAAI,EAAE;AAAR,KAAD,CAAR;AACD,GAFD;;AAIA,SAAO;AACLL,IAAAA,KAAK,EAAEQ,UAAU,CAACR,KADb;AAELiB,IAAAA,OAAO,EAAEP,YAFJ;AAGLC,IAAAA,QAHK;AAILC,IAAAA,kBAJK;AAKLG,IAAAA,gBALK;AAMLC,IAAAA;AANK,GAAP;AAQD,CA7BD;;AA+BA,eAAeV,QAAf","sourcesContent":["import { useReducer } from 'react';\n\nconst initialInputState = {\n  value: '',\n  isTouched: false,\n};\n\nconst inputStateReducer = (state, action) => {\n  if (action.type === 'INPUT') {\n    return { value: action.value, isTouched: state.isTouched };\n  }\n  if (action.type === 'BLUR') {\n    return { isTouched: true, value: state.value };\n  }\n  if (action.type === 'RESET') {\n    return { isTouched: false, value: '' };\n  }\n  return inputStateReducer;\n};\n\nconst useInput = (validateValue) => {\n  const [inputState, dispatch] = useReducer(\n    inputStateReducer,\n    initialInputState\n  );\n\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n\n  const valueChangeHandler = (event) => {\n    dispatch({ type: 'INPUT', value: event.target.value });\n  };\n\n  const inputBlurHandler = (event) => {\n    dispatch({ type: 'BLUR' });\n  };\n\n  const reset = () => {\n    dispatch({ type: 'RESET' });\n  };\n\n  return {\n    value: inputState.value,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset,\n  };\n};\n\nexport default useInput;"]},"metadata":{},"sourceType":"module"}