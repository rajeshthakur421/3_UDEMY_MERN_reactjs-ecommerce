{"ast":null,"code":"import _slicedToArray from \"/home/rudransh/public_html/MERN/react-node-ecommerce-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport useCallbackRef from '@restart/hooks/useCallbackRef';\nimport useMergedRefs from '@restart/hooks/useMergedRefs';\nimport { useState } from 'react';\nimport usePopper from './usePopper';\nimport useRootClose from './useRootClose';\nimport useWaitForDOMRef from './useWaitForDOMRef';\nimport mergeOptionsWithPopperConfig from './mergeOptionsWithPopperConfig';\nimport { renderTransition } from './ImperativeTransition';\n/**\n * Built on top of `Popper.js`, the overlay component is\n * great for custom tooltip overlays.\n */\n\nconst Overlay =\n/*#__PURE__*/\nReact.forwardRef((props, outerRef) => {\n  const flip = props.flip,\n        offset = props.offset,\n        placement = props.placement,\n        containerPadding = props.containerPadding,\n        _props$popperConfig = props.popperConfig,\n        popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig,\n        Transition = props.transition,\n        runTransition = props.runTransition;\n\n  const _useCallbackRef = useCallbackRef(),\n        _useCallbackRef2 = _slicedToArray(_useCallbackRef, 2),\n        rootElement = _useCallbackRef2[0],\n        attachRef = _useCallbackRef2[1];\n\n  const _useCallbackRef3 = useCallbackRef(),\n        _useCallbackRef4 = _slicedToArray(_useCallbackRef3, 2),\n        arrowElement = _useCallbackRef4[0],\n        attachArrowRef = _useCallbackRef4[1];\n\n  const mergedRef = useMergedRefs(attachRef, outerRef);\n  const container = useWaitForDOMRef(props.container);\n  const target = useWaitForDOMRef(props.target);\n\n  const _useState = useState(!props.show),\n        _useState2 = _slicedToArray(_useState, 2),\n        exited = _useState2[0],\n        setExited = _useState2[1];\n\n  const popper = usePopper(target, rootElement, mergeOptionsWithPopperConfig({\n    placement,\n    enableEvents: !!props.show,\n    containerPadding: containerPadding || 5,\n    flip,\n    offset,\n    arrowElement,\n    popperConfig\n  })); // TODO: I think this needs to be in an effect\n\n  if (props.show && exited) {\n    setExited(false);\n  }\n\n  const handleHidden = (...args) => {\n    setExited(true);\n\n    if (props.onExited) {\n      props.onExited(...args);\n    }\n  }; // Don't un-render the overlay while it's transitioning out.\n\n\n  const mountOverlay = props.show || !exited;\n  useRootClose(rootElement, props.onHide, {\n    disabled: !props.rootClose || props.rootCloseDisabled,\n    clickTrigger: props.rootCloseEvent\n  });\n\n  if (!mountOverlay) {\n    // Don't bother showing anything if we don't have to.\n    return null;\n  }\n\n  const onExit = props.onExit,\n        onExiting = props.onExiting,\n        onEnter = props.onEnter,\n        onEntering = props.onEntering,\n        onEntered = props.onEntered;\n  let child = props.children(Object.assign({}, popper.attributes.popper, {\n    style: popper.styles.popper,\n    ref: mergedRef\n  }), {\n    popper,\n    placement,\n    show: !!props.show,\n    arrowProps: Object.assign({}, popper.attributes.arrow, {\n      style: popper.styles.arrow,\n      ref: attachArrowRef\n    })\n  });\n  child = renderTransition(Transition, runTransition, {\n    in: !!props.show,\n    appear: true,\n    mountOnEnter: true,\n    unmountOnExit: true,\n    children: child,\n    onExit,\n    onExiting,\n    onExited: handleHidden,\n    onEnter,\n    onEntering,\n    onEntered\n  });\n  return container ?\n  /*#__PURE__*/\n  ReactDOM.createPortal(child, container) : null;\n});\nOverlay.displayName = 'Overlay';\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}